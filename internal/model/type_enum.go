// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	// MetricTypeGauge is a MetricType of type Gauge.
	MetricTypeGauge MetricType = iota
	// MetricTypeCounter is a MetricType of type Counter.
	MetricTypeCounter
)

var ErrInvalidMetricType = errors.New("not a valid MetricType")

const _MetricTypeName = "gaugecounter"

var _MetricTypeMap = map[MetricType]string{
	MetricTypeGauge:   _MetricTypeName[0:5],
	MetricTypeCounter: _MetricTypeName[5:12],
}

// String implements the Stringer interface.
func (x MetricType) String() string {
	if str, ok := _MetricTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MetricType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MetricType) IsValid() bool {
	_, ok := _MetricTypeMap[x]
	return ok
}

var _MetricTypeValue = map[string]MetricType{
	_MetricTypeName[0:5]:  MetricTypeGauge,
	_MetricTypeName[5:12]: MetricTypeCounter,
}

// ParseMetricType attempts to convert a string to a MetricType.
func ParseMetricType(name string) (MetricType, error) {
	if x, ok := _MetricTypeValue[name]; ok {
		return x, nil
	}
	return MetricType(0), fmt.Errorf("%s is %w", name, ErrInvalidMetricType)
}

// MarshalText implements the text marshaller method.
func (x MetricType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MetricType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseMetricType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
